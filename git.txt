Git usefull commands
1. git show --pretty="" --name-only [commit id]
    list all the files in a commit
2. git diff --cached [filename]
    show difference of staged file from the last commit
    *remove --cached if not yet staged
3. Adding local repo to master #ref https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
   3.1. Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub.
   3.2. Open Git Bash.
   3.3. Change the current working directory to your local project.
   3.4. Initialize the local directory as a Git repository.
        git init
   3.5. Add the files in your new local repository. This stages them for the first commit.
        git add .
   3.6. Commit the files that you've staged in your local repository.
        git commit -m "First commit"
   3.7. At the top of your GitHub repository's Quick Setup page, copy the remote repository URL. 
   3.8. In the Command prompt, add the URL for the remote repository where your local repository will be pushed.
        git remote add origin [remote repository URL]
        git remote -v
            *To verify the new remore URL
   3.9. Push the changes in your local repository to GitHub.
        git push origin master
            *Pushes the changes in your local repository up to the remote repository you specified as the origin
4. Updating a local repository with changes from a Github repository
    git pull origin master
5. Remove uncommitted changes
    Tracked files: git checkout -f
        *Undo any changes on tracked files
    Untracked files: git clean -fd
        *Remove any untracked files
6. Merge last two commits
    git rebase --interactive HEAD~2
    pick then squash
        *squash the last commit
7. Merge branch to master
    (on branch development)$ git merge master
    (resolve any merge conflicts if there are any)
    git checkout master
    git merge development (there won't be any conflicts now)
8. Compare with previous commit
    git diff HEAD^ [path to file]
9. Compare with specific commit
    git diff [commit id] [path to file]
10. Temporarily save task without pushing to branch(stash)
    git stash
    git stash -u
        *stash including untracked
11. Remove all stashes
    git stash clear
12. Remove specific stash
    git stash drop stash@{n} where n: stash index(git stash list)
13. Remove changes in file from latest commit
    git checkout -- path/to/the/file.txt
14. Git settings
15. Get remote URL
    git config --get remote.origin.url
16. How to add a file to the last commit
    git add the_left_out_file
    git commit --amend --no-edit
17. Show last committed files
    git log --name-only -1
18. Checkout specific branch
    git clone -b [branch] [url]
19. The following command will save your password in memory for sometime.
    git config --global credential.helper cache
    # Set git to use the credential memory cache

    git config --global credential.helper 'cache --timeout=3600'
    # Set the cache to timeout after 1 hour (setting is in seconds)
20. Check if there are changes to push
    git diff --stat --cached [remote/branch]
21. Check if there are changes to pull. Check whether the branch you are tracking is ahead, behind or has diverged.
    git status -uno
22. Show what would be done, without making any changes.
    git fetch --dry-run
23. Pushing code to two remotes
    git remote set-url origin --push --add <a remote>
    git remote set-url origin --push --add <another remote>
    So when you push to origin, it will push to both repositories.
24. Setting proxy
    git config --global http.proxy "Proxy here"
    git config --global http.proxy http://F500050284:password@202.15.153.251:8080/
    
    to unset: git config --global --unset http.proxy